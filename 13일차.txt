--함수
create table testfunc( id number, num varchar2(20) );
insert into testfunc values (1, '34.5678');
select * from testfunc where id=1;
--round 보여지는 소수점 자리를 나타내는 기능(반올림)
select round(num,2) from testfunc where id = 1;
select round(num/2,1) from testfunc where id = 1;
--round 보여지는 소수점 자리를 나타내는 기능(버림)
select trunc(num,2) from testfunc where id = 1;

insert into testfunc values(2, '55');
--mod 나머지값을 구하는 기능
select mod(num,2) from testfunc where id =2;

--id 1 ~ 10 까지 총 10 명을 저장하시오
insert into testfunc values(3, '30');
insert into testfunc values(4, '45');
insert into testfunc values(5, '22');
insert into testfunc values(6, '45');
insert into testfunc values(7, '90');
insert into testfunc values(8, '12');
insert into testfunc values(9, '77');
insert into testfunc values(10, '63');
--id 1 ~ 10 사이에 있는 홀수 id 값들을 모두 출력하시오.
select * from testfunc where mod(id,2) !=0;
--id ! 1 ~ 10 사이에 있는 짝수 id의 값(num)들을 2로 나눈 후 소수점 2자리까지 표현하시오(버려지는 소수점은 반올림으로 진행 하시오.)
select id, round(num/2,2) from testfunc where mod(id,2)=0;

--upper 모든 문자를 대문자로 변환
--lower 모든 문자를 소문자로 변환
--initcap 모든 문자의 첫번째(&공백 다음) 문자를 대문자로 변환
insert into testfunc values(11,'welcome to oracle');
select * from testfunc where id = 11;

select upper(num) from testfunc where id = 11;
select lower(num) from testfunc where id = 11;
select initcap(num) from testfunc where id=11;

-----------------------------------------------------
create table testCompany(
  name varchar2(20),
  연봉 varchar2(20),
  class varchar2(20)
);
insert into testCompany values('hong gil dong_M','3600','Manager');
insert into testCompany values('kim gea ddong_M','2555','ManaGer');
insert into testCompany values('Go gil dong_M','2800','ManaGER');
insert into testCompany values('hong gil dong_E','3111','EmpLoyee');
insert into testCompany values('kim gea ddong_E','2600','EmpLoYee');
insert into testCompany values('Go gil dong_E','2950','employee');

select * from testcompany;
--직급이 manager인 사원을 검색하여 출력 하시오.
select * from testCompany where lower(class)='manager';
--직급이 employee이면서 연봉이 2800이상인 사람을 모두 출력하시오.
select * from testCompany where 연봉>='2800' and upper(class)='EMPLOYEE';
--모든 사원이 이름의 첫번째 글자는 대문자로 출력하고 한달 급여를 출력하시오(소수점 이하는 버림)
select initcap(name), trunc(연봉/12,0), class from testCompany ;

--그룹함수
create table testClass(class varchar2(10), score number);
insert into testClass values('A반',11);
insert into testClass values('A반',12);
insert into testClass values('A반',13);
insert into testClass values('B반',21);
insert into testClass values('B반',22);
insert into testClass values('B반',23);
insert into testClass values('1',31);
insert into testClass values('1',32);
insert into testClass values('1',33);
insert into testClass values('',40);

select * from testclass;
select sum(score) from testclass;
select avg(score) from testclass;
select max(score), min(score) from testclass;
select count(class) from testclass;
select count(*) from testclass;
--group by 해당하는 값을 그룹별로 묶을 때 사용
select class, sum(score) from testclass group by class;
select class, sum(score) from testclass group by class
                        Having sum (score)>40;

--각 클래스 별 개수를 출력하시오
select class, count(*) from testclass group by class;
--각 클래스 별 평균을 구하고 평균 별 내림차순으로 정렬하여 출력하시오
select class, avg(score) from testclass group by class order by avg(score) desc;
--각 class별로 가장 큰 값과 가장 작은 값을 출력하시오
select class, max(score),min(score) from testclass group by class;

----------------------------------------------------------------

create table testName(id varchar2(20), class varchar2(20));
insert into testName values('홍길동','A반');
insert into testName values('김개똥','B반');
insert into testName values('고길동','C반');

create table testLesson(id varchar2(20), lesson varchar2(20), score number);
insert into testLesson values('홍길동','python',80);
insert into testLesson values('홍길동','java',90);
insert into testLesson values('홍길동','c언어',70);
insert into testLesson values('김개똥','server2012',70);
insert into testLesson values('김개똥','linux',90);
insert into testLesson values('고길동','jsp',100);

select * from testName;
select * from testLesson;
select * from testname, testlesson;
--inner join 테이블 두개를 합치는 기능
select * from testname N inner join testlesson L on N.id=L.id;
--중복되는 컬럼을 하나만 나타내고 싶을 때
select N.*,l.lesson, l.score from testname N inner join testlesson L on N.id=L.id;

--id가 홍길동인 사람의 인적사항을 id, class, lsesson, score로 출력하시오
select N.*,l.lesson,l.score from testname N inner join testlesson l on n.id=l.id where n.id ='홍길동' ;
--각 이름, 클래스별 합계와 평균을 출력하시오(id는 testName 테이블에서 받아오며, 나머지 값은 testLesson 테이블의 조인을 이용해서 표현하시오)
select N.id,n.class,sum(l.score), avg(l.score) from testname N inner join testlesson l on n.id=l.id group by n.id, n.class order by n.class asc;


--서브 쿼리 : 쿼리문 안에 또 다른 쿼리문을 넣어서 사용
select * from testlesson;
select * from testname where id = 
    (select id from testlesson where lesson='python'); --괄호 안의 내용이 먼저 실행
    
--이전에 만들었던 employee테이블을 사용하시오.
--평균 급여보다 많이 받는 사람들을 출력하시오.
select * from employee where salary>(select avg(salary) from employee);
--평균 급여보다 작은 사람들을 출력하시오. 단, 회사는 삼성을 다니며 오름차순(salary)으로 정렬된 모든 값을 출력 하시오.    
select * from employee where salary<(select avg(salary) from employee) and job='삼성' order by salary asc;

--외래키 
CREATE TABLE membership
(
    m_id      VARCHAR2(20)    NOT NULL, 
    m_pwd     VARCHAR2(20)    NOT NULL, 
    m_name    VARCHAR2(20)    , 
    m_addr    VARCHAR2(20)    , 
     PRIMARY KEY (m_id)
);

CREATE TABLE board
(
    b_num        INT             NOT NULL, 
    b_id         VARCHAR2(20)    NULL, 
    b_title      VARCHAR2(20)    NULL, 
    b_content    VARCHAR2(20)    NULL, 
    b_date       DATE            NULL, 
     PRIMARY KEY (b_num)
);

CREATE SEQUENCE board_SEQ --시퀀스라는 값을 만들건데 그 시퀀스 이름은 이렇게 하겠다
START WITH 1 --보드 시퀀스라는 값이 1부터 시작해서
INCREMENT BY 1; --1씩 증가하겠다


insert into membership(m_id, m_pwd, m_name, m_addr) values('aaa','aaa','홍길동','산골짜기');

insert into board(b_num, b_id, b_title, b_content, b_date)
            values(board_seq.nextval,'aaa','제목','내용',sysdate);

ALTER TABLE board
    ADD CONSTRAINT FK_board_b_id_membership_m_id FOREIGN KEY (b_id) --보드라는 테이블에서 CONSTRAINT(제약조건)을 설정하겠다 그 제약 조건의 이름은 FK_board 로 정하겠다 외래키는 (b_id) 이 컬럼으로 설정하겠다
        REFERENCES membership (m_id) on delete cascade; --연결이 이루어지는 대상은 membership 테이블에 (m_id)라는 컬럼으로 하겠다. on delete cascade 는 참조대상이 지워지면 그 하위에있는것도 모두 지우겠다

delete from membership where m_id='aaa';
delete from board where b_id='aaa';


--------------------------------------------------------
CREATE TABLE member
(
    m_id      VARCHAR2(20)    NOT NULL, 
    m_pwd     VARCHAR2(20)    NULL, 
    m_name    VARCHAR2(20)    NULL, 
    m_addr    VARCHAR2(20)    NULL, 
     PRIMARY KEY (m_id)
);

CREATE TABLE goods
(
    g_num          INT             NOT NULL, 
    g_id           VARCHAR2(20)    NULL, 
    g_name         VARCHAR2(20)    NULL, 
    g_price        INT             NULL, 
    g_count        INT             NULL, 
    g_price_sum    INT             NULL, 
    g_date         DATE            NULL, 
     PRIMARY KEY (g_num)
);

CREATE SEQUENCE goods_SEQ
START WITH 1
INCREMENT BY 1;

ALTER TABLE goods
    ADD CONSTRAINT FK_goods_g_id_member_m_id FOREIGN KEY (g_id)
        REFERENCES member (m_id) on delete cascade;

insert into member(m_id, m_pwd, m_name, m_addr) values('aaa','aaa','홍길동','산골짜기');
insert into member(m_id, m_pwd, m_name, m_addr) values('bbb','bbb','김개똥','개똥별');
insert into member(m_id, m_pwd, m_name, m_addr) values('ccc','ccc','고길동','마포구');
insert into member(m_id, m_pwd, m_name, m_addr) values('ddd','ddd','김말이','분식집');

insert into goods(g_num,g_id,g_name,g_price,g_count,g_price_sum,g_date) values(goods_SEQ.nextval,'aaa','운동화',75000,2,15000,sysdate);
insert into goods(g_num,g_id,g_name,g_price,g_count,g_price_sum,g_date) values(goods_SEQ.nextval,'aaa','티셔츠',15000,5,75000,sysdate);
insert into goods(g_num,g_id,g_name,g_price,g_count,g_price_sum,g_date) values(goods_SEQ.nextval,'bbb','가방',450000,1,450000,sysdate);
insert into goods(g_num,g_id,g_name,g_price,g_count,g_price_sum,g_date) values(goods_SEQ.nextval,'bbb','책',35000,2,70000,sysdate);

select * from member;
select * from goods;

select * from member M inner join goods G on M.m_id=G.g_id ;

select m_id, M_name, g_name, g_price_sum from member M inner join goods G on M.m_id=G.g_id;

select m_id, m_name, m_addr, sum(g.g_price_sum) from member m inner join goods G on m.m_id=g.g_id group by m.m_id, M.m_name, M.m_addr ;

alter table member_tbl_02 add joindate date;


