create USER 이름 IDENTIFIED by 비밀번호;  //계정생성
grant dba to 이름;  //권한 부여  dba : db의 모든 권한

ctrl enter : 실행

저장소 만들기

create table 이름(
    num number, //컬럼들
    name varchar2(10),
    birth varchar2(10),
    tel varchar2(20),
    primary key(num) //num을

); //테이블 생성

테이블에 값 넣기
insert into person values(1000,'홍길동','10100524','0101234');
insert into person(num, tel, name, birth) 
                        values(1001,'010xxx','김개똥','202002'); // 내가 지정한 순서로 저장하는 법


조회
select * from person; // person이란 테이블에 있는 값들을 모두(*) 조회
select name, tel from person;  //person이란 테이블에서 해당하는 컬럼 값을 조회
select * from person where num=1000; //테이블에서 num컬럼에서 해당하는 값을 조회

삭제
delete from person; //person의 모든 데이터를 삭제

수정
update person set name='홍홍홍', birth='1212' where num=1002; //num=1002의 이름과 생일 변경

commit과 rollback
commit;     // develop에서 임시저장한 것을 db에 완전히 저장한다
rollback;    // 커밋한 시점으로 되돌린다

desc test_table;  //해당하는 테이블이 어떠한 형식인지를 알려줌

alter table test_table add(name varchar2(20)); //add     name이란 컬럼 추가와 varchar2 자료형도 추가 
alter table test_table modify(name number);  //modify   name이란 컬럼의 자료형을 수정

alter table test_table rename column name to name_nnn;  //rename column   컬럼이름 변경

alter table test_table drop column name_nnn;   //drop 해당 컬럼 삭제

drop table test_table; //해당하는 테이블 삭제
drop user java2; //계정 삭제 *계정 삭제는 쓰고 있는 계정에서 삭제할 수 없기 때문에 다른 계정에서 삭제해야한다

cascade 오류가 나오면 삭제하려는 해당 계정에 테이블이 존재하기 때문에 drop user 계정이름 cascade; 로 삭제


관계연산자
select * from student where eng>=90;
select * from student where math=100;
select * from student where math!=100;


select math+10 from student;
select id, name, math, math/2 from student where id='2201';
select mod(math,3) from student; --%연산자

논리연산자
select * from student where kor>=90 and math>=90;
select * from student where kor>=90 or math>=90;
select * from student where not kor=99;

select * from student where kor>=90 and kor<=100; --between
select * from student where kor between 90 and 100; --위와 동일


create table test_number(
    numps number(5,2), --해당하는 크기만큼만 숫자를 넣을 수 있다. 총 다섯칸에 소수점 자리 두번째까지 쓸 것이다 ex. 213.25, 1.23
    nump number(3), --정수의 자리 실수값은 받지 않음 ex. 213, 1
    num number
);

insert into test_number values(1.123456,1.123456,1.123456);
insert into test_number values(1234.123456,1.123456,1.123456); --정수의 값은 범위를 벗어나면 오류가 생긴다
insert into test_number values(123.123456,1.123456,1.123456);
insert into test_number values(1.12,1234,1.12);

날짜
create table test_date(my_date date);
insert into test_date values(sysdate); --sysdate 시스템에 대한 날짜를 얻어와서 값을 저장
insert into test_date values('2019/02/02'); 
insert into test_date values('2019/02/02 12:12:12'); 
select * from test_date;
alter session set nls_date_format = 'YYYY/MM/DD HH:MI:SS'; --날짜/시간 형식 변경
select * from test_date where my_date < '2022/01/01'; --해당 날짜 보다 이전 날짜들을 가져옴


실습

--현재 연봉이 1억을 넘는 사람을 출력하시오
select * from employee where salary*12 > 100000000;
--2015년도 이전(2014년도 부터)에 입사한 사람의 이름과 입사년도를 출력하시오
select name, join_company from employee where join_company<'2015/01/01';
--급여가 280~300만원 사이에 있는 사람들을 출력하시오
select * from employee where salary between 2800000 and 3000000;
--입사년도가 2015년 이상이며 연봉이 6000만원 이상인 사람들을 출력하시오.
select * from employee where join_company>='2015/01/01' and salary*12>=60000000;
--회사가 삼성이거나 엘지이며 연봉이 5000만원 이상인 사람들을 출력하시오.
select * from employee where (job='삼성'or job='엘지') and salary*12>=50000000;


--like : 특정값 찾기
SELECT * from employee where name like '김%'; --김으로 시작하며 뒷쪽에는 어떤 값이 들어와도 상관 없는 값을 찾겠다
select * from employee where name like '%똥'; --앞쪽에는 어떤 글자가 와도 상관없으며 똥으로 끝나는 값을 찾겟다
select * from employee where name like '%이%'; --위치에 상관없이 이라는 글자가 들어가는 값을 찾겠다

--desc : 내림차순, asc : 오름차순
select * from employee order by join_company desc;
select * from employee order by join_company asc;

--두개의 값 비교
select * from employee order by join_company asc, salary desc; --입사는 오름차순 이름은 내림차순으로 해라

--회사는 오름 차순으로 정렬하고 연봉은 내림 차순으로 정렬하고 이름에 '김'이 들어가며 연봉은 3000만원 이상인 모든 내용을 출력하시오
select * from employee where name like '%김%' and salary*12 >= 30000000 order by job asc, salary desc;

